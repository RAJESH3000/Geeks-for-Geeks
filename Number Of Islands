//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class DisjointSet{
public:
	vector<int> parent,size;
	DisjointSet(int n){
		size.resize(n+1,1);
		parent.resize(n+1);
		for(int i=0;i<=n;i++) parent[i]=i;
	}
	
	int findUpar(int node){
		if(node==parent[node]) return node;
		return findUpar(parent[node]);
	}
	
	void UnionBySize(int u,int v){
		int Upar_u=findUpar(u);
		int Upar_v=findUpar(v);
		if(Upar_u==Upar_v) return;
		
		if(size[Upar_u]<size[Upar_v]){
			parent[Upar_u]=Upar_v;
			size[Upar_v]+=size[Upar_u];
		}
		else{
			parent[Upar_v]=Upar_u;
			size[Upar_u]+=size[Upar_v];
		}
	}
	
};



class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // code here
        DisjointSet ds(n*m);
        vector<vector<int>> vis(n,vector<int>(m,0));
        int count=0;
        vector<int> ans;
        for(auto it:operators){
            int row=it[0];
            int col=it[1];
            if(vis[row][col])
            {
                ans.push_back(count);
                continue;
            }
            
            vis[row][col]=1;
            count++;
            
            int delrow[]={-1,0,1,0};
            int delcol[]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    if(vis[nrow][ncol]){
                        int nodeNo=row*m+col;
                        int adjNodeNo=nrow*m+ncol;
                        if(ds.findUpar(nodeNo) != ds.findUpar(adjNodeNo)){
                            ds.UnionBySize(nodeNo,adjNodeNo);
                            count--;
                        }
                    }
                }
            }
            ans.push_back(count);
        }
        return ans;
        
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n,m,k; cin>>n>>m>>k;
        vector<vector<int>> a;
        
        for(int i=0; i<k; i++){
            vector<int> temp;
            for(int j=0; j<2; j++){
                int x; cin>>x;
                temp.push_back(x);
            }
            a.push_back(temp);
        }
    
        Solution obj;
        vector<int> res = obj.numOfIslands(n,m,a);
        
        for(auto x : res)cout<<x<<" ";
        cout<<"\n";
    }
}

// } Driver Code Ends
